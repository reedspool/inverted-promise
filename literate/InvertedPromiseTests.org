#+TITLE: Inverted Promise Tests
#+PROPERTY: header-args    :comments both :tangle ../test/InvertedPromise.test.js

* Preamble

#+begin_src js
import { InvertedPromise } from "../src/InvertedPromise";
#+end_src

* =.resolve()=

#+begin_src js
it("Resolves as expected", async () => {
    const result = "test";
    const promise = InvertedPromise();
    promise.resolve(result);

    expect(await promise).toEqual(result);
})
#+end_src

#+begin_src js
it("Reject or resolve after resolve has no effect", async () => {
    const result = "test";
    const promise = InvertedPromise();
    promise.resolve(result);
    promise.reject(new Error("test 2"))
    promise.resolve("test3")

    expect(await promise).toEqual(result);
})
#+end_src

* =.reject()=

#+begin_src js
it("Rejects as expected", async () => {
    const result = new Error("Test");
    const promise = InvertedPromise();
    promise.reject(result);

    // "Catch and release", turn the rejection into a resolution.
    expect(await promise.catch(a => a)).toEqual(result);
})
#+end_src


#+begin_src js
it("Reject or resolve after reject has no effect", async () => {
    const result = new Error("test");
    const promise = InvertedPromise();
    promise.reject(result);
    promise.reject(new Error("test 2"))
    promise.resolve("test3")

    // "Catch and release", turn the rejection into a resolution.
    expect(await promise.catch(a => a)).toEqual(result);
})
#+end_src

* Acting like a built-in Promise

#+begin_src js
it("Resolving a passed callback, it acts just like a built-in Promise", async () => {
    const result = "test";
    const promise = InvertedPromise((resolve) => resolve(result));

    expect(await promise).toBe(result);
})
#+end_src

#+begin_src js
it("Rejecting a passed callback, it acts just like a built-in Promise", async () => {
    const result = new Error("test");
    const promise = InvertedPromise((_, reject) => reject(result));

    expect(await promise.catch(a => a)).toBe(result);
})
#+end_src

#+begin_src js
it("Can use the new keyword with a callback", async () => {
    const result = "test";
    const promise = new InvertedPromise((resolve) => resolve(result));

    expect(await promise).toBe(result);
})
#+end_src
